{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WeatherComponent = class WeatherComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.temperature = 0;\n    this.feelsLikeTemp = 0;\n    this.humidity = 0;\n    this.pressure = 0;\n    this.windSpeed = 0;\n    this.windGust = 0;\n    this.summary = '';\n    this.iconURL = '';\n    this.city = 'St. Louis';\n    this.units = 'imperial';\n  }\n  ngOnInit() {\n    this.weatherService.getWeather(this.city, this.units).subscribe({\n      next: res => {\n        console.log(res);\n        this.myWeather = res;\n        console.log(this.myWeather);\n        this.temperature = Math.round(this.myWeather.main.temp);\n        this.feelsLikeTemp = Math.round(this.myWeather.main.feels_like);\n        this.humidity = this.myWeather.main.humidity;\n        this.pressure = this.myWeather.main.pressure;\n        this.summary = this.myWeather.weather[0].main;\n        this.iconURL = 'http://openweathermap.org/img/wn/' + this.myWeather.weather[0].icon + '@2x.png';\n        this.windSpeed = Math.round(this.myWeather.wind.speed);\n        this.windGust = Math.round(this.myWeather.wind.gust);\n      },\n      error: error => console.log(error.message),\n      complete: () => console.info('API call completed')\n    });\n  }\n};\nWeatherComponent = __decorate([Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})], WeatherComponent);\nexport { WeatherComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAC3BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAGpC,gBAAW,GAAW,CAAC;IACvB,kBAAa,GAAW,CAAC;IACzB,aAAQ,GAAW,CAAC;IACpB,aAAQ,GAAW,CAAC;IACpB,cAAS,GAAU,CAAC;IACpB,aAAQ,GAAW,CAAC;IACpB,YAAO,GAAW,EAAE;IACpB,YAAO,GAAW,EAAE;IACpB,SAAI,GAAW,WAAW;IAC1B,UAAK,GAAW,UAAU;EAZ4B;EAcpDC,QAAQ;IACN,IAAI,CAACD,cAAc,CAACE,UAAU,CAAC,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,KAAK,CAAC,CAACC,SAAS,CAAC;MAC9DC,IAAI,EAAEC,GAAG,IAAG;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,IAAI,CAACG,SAAS,GAAGH,GAAG;QACpBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,SAAS,CAAC;QAC3B,IAAI,CAACC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,SAAS,CAACI,IAAI,CAACC,IAAI,CAAC;QACvD,IAAI,CAACC,aAAa,GAACJ,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,SAAS,CAACI,IAAI,CAACG,UAAU,CAAC;QAC7D,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACR,SAAS,CAACI,IAAI,CAACI,QAAQ;QAC5C,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACT,SAAS,CAACI,IAAI,CAACK,QAAQ;QAC5C,IAAI,CAACC,OAAO,GAAG,IAAI,CAACV,SAAS,CAACW,OAAO,CAAC,CAAC,CAAC,CAACP,IAAI;QAC7C,IAAI,CAACQ,OAAO,GAAG,mCAAmC,GAAG,IAAI,CAACZ,SAAS,CAACW,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI,GAAC,SAAS;QAC7F,IAAI,CAACC,SAAS,GAAGZ,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,SAAS,CAACe,IAAI,CAACC,KAAK,CAAC;QACtD,IAAI,CAACC,QAAQ,GAAGf,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,SAAS,CAACe,IAAI,CAACG,IAAI,CAAC;MACtD,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAKrB,OAAO,CAACC,GAAG,CAACoB,KAAK,CAACC,OAAO,CAAC;MAC5CC,QAAQ,EAAC,MAAMvB,OAAO,CAACwB,IAAI,CAAC,oBAAoB;KACjD,CAAC;EACJ;CACD;AAlCYlC,gBAAgB,eAL5BD,SAAS,CAAC;EACToC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACWrC,gBAAgB,CAkC5B;SAlCYA,gBAAgB","names":["Component","WeatherComponent","constructor","weatherService","ngOnInit","getWeather","city","units","subscribe","next","res","console","log","myWeather","temperature","Math","round","main","temp","feelsLikeTemp","feels_like","humidity","pressure","summary","weather","iconURL","icon","windSpeed","wind","speed","windGust","gust","error","message","complete","info","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/joshuapatino/Desktop/projects/projects/web projects/WeatherApp/src/app/weather/weather.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WeatherService } from '../weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent implements OnInit {\n  constructor(private weatherService: WeatherService){}\n  //vars\nmyWeather: any; \ntemperature: number = 0;\nfeelsLikeTemp: number = 0;\nhumidity: number = 0;\npressure: number = 0;\nwindSpeed:number = 0;\nwindGust: number = 0\nsummary: string = '';\niconURL: string = '';\ncity: string = 'St. Louis';\nunits: string = 'imperial'; \n\n  ngOnInit(): void {\n    this.weatherService.getWeather(this.city, this.units).subscribe({\n      next:(res)=> { //error block, spit out data if we get anything\n        console.log(res)\n        this.myWeather = res; \n        console.log(this.myWeather)\n        this.temperature = Math.round(this.myWeather.main.temp);\n        this.feelsLikeTemp=Math.round(this.myWeather.main.feels_like);\n        this.humidity = this.myWeather.main.humidity;\n        this.pressure = this.myWeather.main.pressure;\n        this.summary = this.myWeather.weather[0].main;  \n        this.iconURL = 'http://openweathermap.org/img/wn/' + this.myWeather.weather[0].icon+'@2x.png';\n        this.windSpeed = Math.round(this.myWeather.wind.speed);\n        this.windGust = Math.round(this.myWeather.wind.gust); \n      },\n      error: (error) => console.log(error.message), // \n      complete:() => console.info('API call completed')\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}